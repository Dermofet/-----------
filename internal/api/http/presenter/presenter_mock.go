// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces.go

// Package presenter is a generated GoMock package.
package presenter

import (
	view "music-backend-test/internal/api/http/view"
	entity "music-backend-test/internal/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPresenter is a mock of Presenter interface.
type MockPresenter struct {
	ctrl     *gomock.Controller
	recorder *MockPresenterMockRecorder
}

// MockPresenterMockRecorder is the mock recorder for MockPresenter.
type MockPresenterMockRecorder struct {
	mock *MockPresenter
}

// NewMockPresenter creates a new mock instance.
func NewMockPresenter(ctrl *gomock.Controller) *MockPresenter {
	mock := &MockPresenter{ctrl: ctrl}
	mock.recorder = &MockPresenterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPresenter) EXPECT() *MockPresenterMockRecorder {
	return m.recorder
}

// ToListMusicView mocks base method.
func (m *MockPresenter) ToListMusicView(arg0 []*entity.MusicDB) []*view.MusicView {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToListMusicView", arg0)
	ret0, _ := ret[0].([]*view.MusicView)
	return ret0
}

// ToListMusicView indicates an expected call of ToListMusicView.
func (mr *MockPresenterMockRecorder) ToListMusicView(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToListMusicView", reflect.TypeOf((*MockPresenter)(nil).ToListMusicView), arg0)
}

// ToListUserView mocks base method.
func (m *MockPresenter) ToListUserView(users []*entity.UserDB) []*view.UserView {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToListUserView", users)
	ret0, _ := ret[0].([]*view.UserView)
	return ret0
}

// ToListUserView indicates an expected call of ToListUserView.
func (mr *MockPresenterMockRecorder) ToListUserView(users interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToListUserView", reflect.TypeOf((*MockPresenter)(nil).ToListUserView), users)
}

// ToMusicView mocks base method.
func (m *MockPresenter) ToMusicView(arg0 *entity.MusicDB) *view.MusicView {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMusicView", arg0)
	ret0, _ := ret[0].(*view.MusicView)
	return ret0
}

// ToMusicView indicates an expected call of ToMusicView.
func (mr *MockPresenterMockRecorder) ToMusicView(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMusicView", reflect.TypeOf((*MockPresenter)(nil).ToMusicView), arg0)
}

// ToTokenView mocks base method.
func (m *MockPresenter) ToTokenView(token *entity.Token) (*view.TokenView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTokenView", token)
	ret0, _ := ret[0].(*view.TokenView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToTokenView indicates an expected call of ToTokenView.
func (mr *MockPresenterMockRecorder) ToTokenView(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTokenView", reflect.TypeOf((*MockPresenter)(nil).ToTokenView), token)
}

// ToUserView mocks base method.
func (m *MockPresenter) ToUserView(user *entity.UserDB) *view.UserView {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToUserView", user)
	ret0, _ := ret[0].(*view.UserView)
	return ret0
}

// ToUserView indicates an expected call of ToUserView.
func (mr *MockPresenterMockRecorder) ToUserView(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToUserView", reflect.TypeOf((*MockPresenter)(nil).ToUserView), user)
}

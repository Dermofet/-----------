// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces.go

// Package usecase is a generated GoMock package.
package usecase

import (
	context "context"
	entity "music-backend-test/internal/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserInteractor is a mock of UserInteractor interface.
type MockUserInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockUserInteractorMockRecorder
}

// MockUserInteractorMockRecorder is the mock recorder for MockUserInteractor.
type MockUserInteractorMockRecorder struct {
	mock *MockUserInteractor
}

// NewMockUserInteractor creates a new mock instance.
func NewMockUserInteractor(ctrl *gomock.Controller) *MockUserInteractor {
	mock := &MockUserInteractor{ctrl: ctrl}
	mock.recorder = &MockUserInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserInteractor) EXPECT() *MockUserInteractorMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserInteractor) Create(ctx context.Context, user *entity.UserCreate) (*entity.UserID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(*entity.UserID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserInteractorMockRecorder) Create(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserInteractor)(nil).Create), ctx, user)
}

// Delete mocks base method.
func (m *MockUserInteractor) Delete(ctx context.Context, id *entity.UserID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserInteractorMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserInteractor)(nil).Delete), ctx, id)
}

// DislikeTrack mocks base method.
func (m *MockUserInteractor) DislikeTrack(ctx context.Context, userId *entity.UserID, trackId *entity.MusicID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DislikeTrack", ctx, userId, trackId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DislikeTrack indicates an expected call of DislikeTrack.
func (mr *MockUserInteractorMockRecorder) DislikeTrack(ctx, userId, trackId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DislikeTrack", reflect.TypeOf((*MockUserInteractor)(nil).DislikeTrack), ctx, userId, trackId)
}

// GetById mocks base method.
func (m *MockUserInteractor) GetById(ctx context.Context, id *entity.UserID) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockUserInteractorMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockUserInteractor)(nil).GetById), ctx, id)
}

// GetByUsername mocks base method.
func (m *MockUserInteractor) GetByUsername(ctx context.Context, username string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUsername", ctx, username)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUsername indicates an expected call of GetByUsername.
func (mr *MockUserInteractorMockRecorder) GetByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUsername", reflect.TypeOf((*MockUserInteractor)(nil).GetByUsername), ctx, username)
}

// LikeTrack mocks base method.
func (m *MockUserInteractor) LikeTrack(ctx context.Context, userId *entity.UserID, trackId *entity.MusicID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LikeTrack", ctx, userId, trackId)
	ret0, _ := ret[0].(error)
	return ret0
}

// LikeTrack indicates an expected call of LikeTrack.
func (mr *MockUserInteractorMockRecorder) LikeTrack(ctx, userId, trackId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LikeTrack", reflect.TypeOf((*MockUserInteractor)(nil).LikeTrack), ctx, userId, trackId)
}

// ShowLikedTracks mocks base method.
func (m *MockUserInteractor) ShowLikedTracks(ctx context.Context, id *entity.UserID) ([]*entity.Music, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowLikedTracks", ctx, id)
	ret0, _ := ret[0].([]*entity.Music)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowLikedTracks indicates an expected call of ShowLikedTracks.
func (mr *MockUserInteractorMockRecorder) ShowLikedTracks(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowLikedTracks", reflect.TypeOf((*MockUserInteractor)(nil).ShowLikedTracks), ctx, id)
}

// Update mocks base method.
func (m *MockUserInteractor) Update(ctx context.Context, id *entity.UserID, user *entity.UserCreate) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, user)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockUserInteractorMockRecorder) Update(ctx, id, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserInteractor)(nil).Update), ctx, id, user)
}

// MockMusicInteractor is a mock of MusicInteractor interface.
type MockMusicInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockMusicInteractorMockRecorder
}

// MockMusicInteractorMockRecorder is the mock recorder for MockMusicInteractor.
type MockMusicInteractorMockRecorder struct {
	mock *MockMusicInteractor
}

// NewMockMusicInteractor creates a new mock instance.
func NewMockMusicInteractor(ctrl *gomock.Controller) *MockMusicInteractor {
	mock := &MockMusicInteractor{ctrl: ctrl}
	mock.recorder = &MockMusicInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMusicInteractor) EXPECT() *MockMusicInteractorMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMusicInteractor) Create(ctx context.Context, musicCreate *entity.MusicCreate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, musicCreate)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockMusicInteractorMockRecorder) Create(ctx, musicCreate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMusicInteractor)(nil).Create), ctx, musicCreate)
}

// Delete mocks base method.
func (m *MockMusicInteractor) Delete(ctx context.Context, id *entity.MusicID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMusicInteractorMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMusicInteractor)(nil).Delete), ctx, id)
}

// GetAll mocks base method.
func (m *MockMusicInteractor) GetAll(ctx context.Context) ([]*entity.Music, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]*entity.Music)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockMusicInteractorMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockMusicInteractor)(nil).GetAll), ctx)
}

// Update mocks base method.
func (m *MockMusicInteractor) Update(ctx context.Context, musicUpdate *entity.MusicCreate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, musicUpdate)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockMusicInteractorMockRecorder) Update(ctx, musicUpdate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMusicInteractor)(nil).Update), ctx, musicUpdate)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	entity "music-backend-test/internal/entity"
	"music-backend-test/internal/utils"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserRepository) Create(ctx context.Context, user *entity.UserCreate) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserRepositoryMockRecorder) Create(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRepository)(nil).Create), ctx, user)
}

// Delete mocks base method.
func (m *MockUserRepository) Delete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserRepository)(nil).Delete), ctx, id)
}

// DislikeTrack mocks base method.
func (m *MockUserRepository) DislikeTrack(ctx context.Context, userId, trackId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DislikeTrack", ctx, userId, trackId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DislikeTrack indicates an expected call of DislikeTrack.
func (mr *MockUserRepositoryMockRecorder) DislikeTrack(ctx, userId, trackId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DislikeTrack", reflect.TypeOf((*MockUserRepository)(nil).DislikeTrack), ctx, userId, trackId)
}

// GetById mocks base method.
func (m *MockUserRepository) GetById(ctx context.Context, id uuid.UUID) (*entity.UserDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(*entity.UserDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockUserRepositoryMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockUserRepository)(nil).GetById), ctx, id)
}

// GetByUsername mocks base method.
func (m *MockUserRepository) GetByUsername(ctx context.Context, username string) (*entity.UserDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUsername", ctx, username)
	ret0, _ := ret[0].(*entity.UserDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUsername indicates an expected call of GetByUsername.
func (mr *MockUserRepositoryMockRecorder) GetByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUsername", reflect.TypeOf((*MockUserRepository)(nil).GetByUsername), ctx, username)
}

// LikeTrack mocks base method.
func (m *MockUserRepository) LikeTrack(ctx context.Context, userId, trackId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LikeTrack", ctx, userId, trackId)
	ret0, _ := ret[0].(error)
	return ret0
}

// LikeTrack indicates an expected call of LikeTrack.
func (mr *MockUserRepositoryMockRecorder) LikeTrack(ctx, userId, trackId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LikeTrack", reflect.TypeOf((*MockUserRepository)(nil).LikeTrack), ctx, userId, trackId)
}

// ShowLikedTracks mocks base method.
func (m *MockUserRepository) ShowLikedTracks(ctx context.Context, id uuid.UUID) ([]*entity.MusicDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowLikedTracks", ctx, id)
	ret0, _ := ret[0].([]*entity.MusicDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowLikedTracks indicates an expected call of ShowLikedTracks.
func (mr *MockUserRepositoryMockRecorder) ShowLikedTracks(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowLikedTracks", reflect.TypeOf((*MockUserRepository)(nil).ShowLikedTracks), ctx, id)
}

// Update mocks base method.
func (m *MockUserRepository) Update(ctx context.Context, id uuid.UUID, user *entity.UserCreate) (*entity.UserDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, user)
	ret0, _ := ret[0].(*entity.UserDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockUserRepositoryMockRecorder) Update(ctx, id, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserRepository)(nil).Update), ctx, id, user)
}

// MockMusicRepository is a mock of MusicRepository interface.
type MockMusicRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMusicRepositoryMockRecorder
}

// MockMusicRepositoryMockRecorder is the mock recorder for MockMusicRepository.
type MockMusicRepositoryMockRecorder struct {
	mock *MockMusicRepository
}

// NewMockMusicRepository creates a new mock instance.
func NewMockMusicRepository(ctrl *gomock.Controller) *MockMusicRepository {
	mock := &MockMusicRepository{ctrl: ctrl}
	mock.recorder = &MockMusicRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMusicRepository) EXPECT() *MockMusicRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMusicRepository) Create(ctx context.Context, musicCreate *entity.MusicParse, fileType utils.FileType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, musicCreate, fileType)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockMusicRepositoryMockRecorder) Create(ctx, musicCreate interface{}, fileType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMusicRepository)(nil).Create), ctx, musicCreate, fileType)
}

// Delete mocks base method.
func (m *MockMusicRepository) Delete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMusicRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMusicRepository)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockMusicRepository) Get(ctx context.Context, musicId uuid.UUID) (*entity.MusicDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, musicId)
	ret0, _ := ret[0].(*entity.MusicDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockMusicRepositoryMockRecorder) Get(ctx, musicId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMusicRepository)(nil).Get), ctx, musicId)
}

// GetAll mocks base method.
func (m *MockMusicRepository) GetAll(ctx context.Context) ([]*entity.MusicDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]*entity.MusicDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockMusicRepositoryMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockMusicRepository)(nil).GetAll), ctx)
}

// GetAllSortByTime mocks base method.
func (m *MockMusicRepository) GetAllSortByTime(ctx context.Context) ([]*entity.MusicDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSortByTime", ctx)
	ret0, _ := ret[0].([]*entity.MusicDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSortByTime indicates an expected call of GetAllSortByTime.
func (mr *MockMusicRepositoryMockRecorder) GetAllSortByTime(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSortByTime", reflect.TypeOf((*MockMusicRepository)(nil).GetAllSortByTime), ctx)
}

// GetAndSortByPopular mocks base method.
func (m *MockMusicRepository) GetAndSortByPopular(ctx context.Context) ([]*entity.MusicDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAndSortByPopular", ctx)
	ret0, _ := ret[0].([]*entity.MusicDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAndSortByPopular indicates an expected call of GetAndSortByPopular.
func (mr *MockMusicRepositoryMockRecorder) GetAndSortByPopular(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAndSortByPopular", reflect.TypeOf((*MockMusicRepository)(nil).GetAndSortByPopular), ctx)
}

// Update mocks base method.
func (m *MockMusicRepository) Update(ctx context.Context, id uuid.UUID, musicUpdate *entity.MusicParse, fileType utils.FileType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, musicUpdate, fileType)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockMusicRepositoryMockRecorder) Update(ctx, id, musicUpdate interface{}, fileType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMusicRepository)(nil).Update), ctx, musicUpdate, fileType)
}

definitions:
  entity.UserCreate:
    properties:
      password:
        description: Пароль
        type: string
      username:
        description: Имя пользователя
        type: string
    type: object
  view.TokenView:
    properties:
      token:
        description: JWT токен
        type: string
    type: object
  view.UserView:
    properties:
      id:
        description: ID
        type: string
      name:
        description: Имя пользователя
        type: string
    type: object
host: localhost:8000
info:
  contact:
    name: Dermofet3_3
  description: API for Golang Test Project
  termsOfService: http://swagger.io/terms/
  title: Golang Test API
  version: 0.0.1
paths:
  /auth/signin:
    post:
      consumes:
      - application/json
      description: Авторизация пользователя с использованием имени пользователя и
        пароля.
      parameters:
      - description: Данные пользователя для входа
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entity.UserCreate'
      produces:
      - application/json
      responses:
        "200":
          description: Токен авторизации
          schema:
            $ref: '#/definitions/view.TokenView'
        "400":
          description: Некорректный запрос
        "401":
          description: Ошибка авторизации
        "422":
          description: Ошибка при обработке данных
        "500":
          description: Внутренняя ошибка сервера
      summary: Вход пользователя
      tags:
      - Auth
  /auth/signup:
    post:
      consumes:
      - application/json
      description: Регистрация нового пользователя.
      parameters:
      - description: Данные пользователя для регистрации
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entity.UserCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Токен авторизации
          schema:
            $ref: '#/definitions/view.TokenView'
        "400":
          description: Некорректный запрос
        "422":
          description: Ошибка при обработке данных
        "500":
          description: Внутренняя ошибка сервера
      summary: Регистрация пользователя
      tags:
      - Auth
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Удаление пользователя по его уникальному идентификатору.
      parameters:
      - description: Уникальный идентификатор пользователя (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - text/plain
      responses:
        "204":
          description: Пользователь успешно удален
        "400":
          description: Некорректный запрос
        "401":
          description: Неавторизованный запрос
        "404":
          description: Пользователь не найден
        "500":
          description: Внутренняя ошибка сервера
      security:
      - JwtAuth: []
      summary: Удаление пользователя по ID
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: Получение информации о пользователе по его уникальному идентификатору.
      parameters:
      - description: Уникальный идентификатор пользователя (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Данные пользователя
          schema:
            $ref: '#/definitions/view.UserView'
        "400":
          description: Некорректный запрос
        "401":
          description: Неавторизованный запрос
        "404":
          description: Пользователь не найден
        "500":
          description: Внутренняя ошибка сервера
      security:
      - JwtAuth: []
      summary: Получение пользователя по ID
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Обновление информации о пользователе по его уникальному идентификатору.
      parameters:
      - description: Уникальный идентификатор пользователя (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: Данные пользователя для обновления
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entity.UserCreate'
      produces:
      - application/json
      responses:
        "200":
          description: Обновленные данные пользователя
          schema:
            $ref: '#/definitions/view.UserView'
        "400":
          description: Некорректный запрос
        "401":
          description: Неавторизованный запрос
        "404":
          description: Пользователь не найден
        "422":
          description: Ошибка при обработке данных
        "500":
          description: Внутренняя ошибка сервера
      security:
      - JwtAuth: []
      summary: Обновление пользователя по ID
      tags:
      - Users
  /users/{username}:
    get:
      consumes:
      - application/json
      description: Получение информации о пользователе по его уникальному идентификатору.
      parameters:
      - description: Username пользователя
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Данные пользователя
          schema:
            $ref: '#/definitions/view.UserView'
        "400":
          description: Некорректный запрос
        "401":
          description: Неавторизованный запрос
        "404":
          description: Пользователь не найден
        "500":
          description: Внутренняя ошибка сервера
      security:
      - JwtAuth: []
      summary: Получение пользователя по Username
      tags:
      - Users
  /users/me:
    delete:
      consumes:
      - application/json
      description: Удаление пользователя по его уникальному идентификатору из JWT
        токена.
      produces:
      - text/plain
      responses:
        "204":
          description: Пользователь успешно удален
        "400":
          description: Некорректный запрос
        "401":
          description: Неавторизованный запрос
        "404":
          description: Пользователь не найден
        "500":
          description: Внутренняя ошибка сервера
      security:
      - JwtAuth: []
      summary: Удаление пользователя по JWT токену
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: Получение пользователя по его уникальному идентификатору из JWT
        токена
      produces:
      - text/plain
      responses:
        "200":
          description: Данные пользователя
          schema:
            $ref: '#/definitions/view.UserView'
        "400":
          description: Некорректный запрос
        "401":
          description: Неавторизованный запрос
        "404":
          description: Пользователь не найден
        "500":
          description: Внутренняя ошибка сервера
      security:
      - JwtAuth: []
      summary: Получение пользователя по JWT токену
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Обновление информации о пользователе по его уникальному идентификатору
        из JWT токена
      parameters:
      - description: Данные пользователя для обновления
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entity.UserCreate'
      produces:
      - application/json
      responses:
        "200":
          description: Обновленные данные пользователя
          schema:
            $ref: '#/definitions/view.UserView'
        "400":
          description: Некорректный запрос
        "401":
          description: Неавторизованный запрос
        "404":
          description: Пользователь не найден
        "422":
          description: Ошибка при обработке данных
        "500":
          description: Внутренняя ошибка сервера
      security:
      - JwtAuth: []
      summary: Обновление пользователя по JWT токену
      tags:
      - Users
schemes:
- http
securityDefinitions:
  JwtAuth:
    description: JWT Bearer токен для аутентификации
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
